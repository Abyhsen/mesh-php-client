<?php

namespace GenticsMeshRestApi;

use GuzzleHttp\Psr7;
use GuzzleHttp\Psr7\Request as HttpRequest;
use GuzzleHttp\Psr7\Uri;
use Psr\Http\Message\RequestInterface;

class Resource
{
    const TEMPLATE_REGEXP = '/\{([^\{\}]+)\}/';

    /**
     * @param   $string
     * @param  mixed $interpolate
     * @param  mixed $defaults
     * @return string
     */
    final protected function template($string, array $interpolate = [], array $defaults = [])
    {
        return (string) preg_replace_callback(static::TEMPLATE_REGEXP, function ($matches) use ($defaults, $interpolate) {
            $key = $matches[1];
            if (isset($interpolate[$key]) && $interpolate[$key] != null) {
                return urlencode((string) $interpolate[$key]);
            }

            if (isset($defaults[$key]) && $defaults[$key] != null) {
                return urlencode((string) $defaults[$key]);
            }

            return '';
        }, $string);
    }

    private $uri;

    public function __construct($uri)
    {
        $this->uri = $uri;
    }

    /**
     * @return string
     */
    final protected function getUri()
    {
        return $this->uri;
    }

}

class RequestBuilder extends Resource
{
    public function __construct($options = [])
    {
        $baseUriParameters = [];
        if (isset($options['baseUriParameters'])) {
            $baseUriParameters = $options['baseUriParameters'];
        }
        if (isset($options['baseUri'])) {
            $baseUri = $this->template($options['baseUri'], $baseUriParameters);
        } else {
            $baseUri = $this->template('http://localhost:8080/api/v1', []);
        }
        parent::__construct(trim($baseUri, '/'));
    }

    /**
     * @return RequestInterface
     */
    final public function buildCustom($method, $uri, $body = null, array $options = [])
    {
        if (isset($options['uriParameters'])) {
            $uri = $this->template($this->getUri() . $uri, $options['uriParameters']);
            unset($options['uriParams']);
        } else {
            $uri = $this->getUri() . $uri;
        }
        return $this->buildRequest($method, $uri, $body, $options);
    }

    /**
     * @return RawSearchResource
     */
    public function rawSearch()
    {
        return new RawSearchResource($this->getUri() . '/rawSearch');
    }

    /**
     * @return Resource11
     */
    public function withProject($project)
    {

        $uri = $this->template($this->getUri() . '/{project}', ['project' => $project]);
        return new Resource11($uri);
    }

}

final class Resource116PostRequest extends Request
{

    private $query;
    private $queryParts;

    /**
     * @return Resource116PostRequest
     */
    public function withPerPage($perPage)
    {
        $query = $this->getUri()->getQuery();
        if ($this->query !== $query) {
            $this->queryParts = Psr7\parse_query($query);
        }
        if (isset($this->queryParts['perPage']) && !is_array($this->queryParts['perPage'])) {
            $this->queryParts['perPage'] = [$this->queryParts['perPage']];
        }
        $this->queryParts['perPage'][] = $perPage;
        ksort($this->queryParts);
        $this->query = Psr7\build_query($this->queryParts);
        return $this->withUri($this->getUri()->withQuery($this->query));
    }

    /**
     * @return Resource116PostRequest
     */
    public function withPage($page)
    {
        $query = $this->getUri()->getQuery();
        if ($this->query !== $query) {
            $this->queryParts = Psr7\parse_query($query);
        }
        if (isset($this->queryParts['page']) && !is_array($this->queryParts['page'])) {
            $this->queryParts['page'] = [$this->queryParts['page']];
        }
        $this->queryParts['page'][] = $page;
        ksort($this->queryParts);
        $this->query = Psr7\build_query($this->queryParts);
        return $this->withUri($this->getUri()->withQuery($this->query));
    }

}
